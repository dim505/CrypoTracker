[{"C:\\scratch\\CryptoCurrencyTracker\\src\\index.js":"1","C:\\scratch\\CryptoCurrencyTracker\\src\\App.js":"2","C:\\scratch\\CryptoCurrencyTracker\\src\\AppState.js":"3","C:\\scratch\\CryptoCurrencyTracker\\src\\SharedFunctions\\ApiCall.js":"4","C:\\scratch\\CryptoCurrencyTracker\\src\\appState.js":"5","C:\\scratch\\CryptoCurrencyTracker\\src\\ApiCall.js":"6"},{"size":230,"mtime":1611337768000,"results":"7","hashOfConfig":"8"},{"size":7159,"mtime":1611337768000,"results":"9","hashOfConfig":"8"},{"size":568,"mtime":1611337768000,"results":"10","hashOfConfig":"8"},{"size":1043,"mtime":1611337768000,"results":"11","hashOfConfig":"8"},{"size":568,"mtime":1611337768000,"results":"12","hashOfConfig":"8"},{"size":969,"mtime":1611337768000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i3lvp0",{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\scratch\\CryptoCurrencyTracker\\src\\index.js",[],"C:\\scratch\\CryptoCurrencyTracker\\src\\App.js",["29","30","31"],"import React, { useEffect, useState, useContext } from \"react\";\nimport \"./styles.css\";\nimport Divider from \"@material-ui/core/Divider\";\nimport TimelineIcon from \"@material-ui/icons/Timeline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Switch from \"@material-ui/core/Switch\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Table from \"@material-ui/core/Table\";\nimport { observer } from \"mobx-react\";\nimport NumberFormat from \"react-number-format\";\nimport Button from \"@material-ui/core/Button\";\nimport AppStateContext from \"./appState\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ArrowDropUpIcon from \"@material-ui/icons/ArrowDropUp\";\n\nimport { Icon } from \"coinmarketcap-cryptocurrency-icons\";\nconst App = () => {\n  const AppState = useContext(AppStateContext);\n  console.log(AppState);\n  const [Rows, SetRows] = useState([]);\n\n  useEffect(() => {\n    AppState.GetData();\n    console.log(AppState.Rows);\n\n    setTimeout(() => {\n      var items = document.getElementsByClassName(\"CrytpoIcon\");\n      for (var item of items) {\n        if (item.innerHTML.search(\"undefined\") !== -1) {\n          console.log(item.innerHTML);\n          item.innerHTML = `<img src=\"https://icon-icons.com/icons2/1385/PNG/32/generic-crypto-cryptocurrency-cryptocurrencies-cash-money-bank-payment_95340.png\" /> `;\n        }\n      }\n    }, 500);\n  }, []);\n  return (\n    <div className=\"Container\">\n      <div className=\"NavBar\">\n        <TimelineIcon />\n\n        <Typography variant=\"h5\">CryptoTracker</Typography>\n        <div className=\"FlexEnd\">\n          <Typography display=\"inline\" variant=\"body2\" gutterBottom>\n            Day Mode\n          </Typography>\n          <Switch color=\"primary\" />\n          <Typography display=\"inline\" variant=\"body2\" gutterBottom>\n            Night Mode\n          </Typography>\n        </div>\n      </div>\n      <Divider />\n      <div>\n        <InputLabel htmlFor=\"dasdas\">Search Coins</InputLabel>\n        <Input\n          value=\"dasdas\"\n          endAdornment={\n            <div>\n              <IconButton aria-label=\"toggle password visibility\">\n                <SearchIcon />\n              </IconButton>\n            </div>\n          }\n        />\n\n        <FormControl>\n          <InputLabel htmlFor=\"demo-customized-select-native\">\n            Currency\n          </InputLabel>\n          <NativeSelect\n            id=\"demo-customized-select-native\"\n            /* value={ten}\n              onChange={handleChange} \n              input={<BootstrapInput />} */\n          >\n            <option aria-label=\"None\" value=\"\" />\n            <option value={10}>Ten</option>\n            <option value={20}>Twenty</option>\n            <option value={30}>Thirty</option>\n          </NativeSelect>\n        </FormControl>\n      </div>\n\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Market Cap</TableCell>\n              <TableCell>Price</TableCell>\n              <TableCell>Volume (24 HR)</TableCell>\n              <TableCell>Circulating Supply</TableCell>\n              <TableCell>Change (24 hr)</TableCell>\n              <TableCell>Trade</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {AppState.Rows.length > 1 ? (\n              AppState.Rows.map((row) => (\n                <TableRow>\n                  <TableCell>\n                    <p>\n                      <div className=\"CrytpoIcon\">\n                        <Icon i={row.symbol.toLowerCase()} size={32} />\n                      </div>\n                      <span id=\"CryptoSymbol\"> {row.symbol} </span>\n\n                      {row.name}\n                    </p>\n                  </TableCell>\n                  <TableCell>\n                    {\" \"}\n                    <NumberFormat\n                      value={row.marketCapUsd}\n                      displayType={\"text\"}\n                      thousandSeparator={true}\n                      prefix={\"$\"}\n                      decimalScale={2}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <NumberFormat\n                      value={row.priceUsd}\n                      displayType={\"text\"}\n                      thousandSeparator={true}\n                      prefix={\"$\"}\n                      decimalScale={2}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <NumberFormat\n                      value={row.volumeUsd24Hr}\n                      displayType={\"text\"}\n                      thousandSeparator={true}\n                      decimalScale={3}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <NumberFormat\n                      value={row.maxSupply}\n                      displayType={\"text\"}\n                      thousandSeparator={true}\n                      decimalScale={0}\n                    />\n                  </TableCell>\n                  <TableCell\n                    classes={{\n                      root:\n                        Math.sign(row.changePercent24Hr) === -1\n                          ? \"ColorRed\"\n                          : \"ColorGreen\"\n                    }}\n                  >\n                    <NumberFormat\n                      value={row.changePercent24Hr}\n                      displayType={\"text\"}\n                      decimalScale={2}\n                      suffix=\"%\"\n                      renderText={(value) =>\n                        Math.sign(row.changePercent24Hr) === -1 ? (\n                          <div>\n                            {\" \"}\n                            <ArrowDropDownIcon viewBox=\"0 -7 24 24\" /> {value}{\" \"}\n                          </div>\n                        ) : (\n                          <div>\n                            <ArrowDropUpIcon viewBox=\"0 -7 24 24\" /> {value}{\" \"}\n                          </div>\n                        )\n                      }\n                    />\n                  </TableCell>\n\n                  <TableCell>\n                    <Button size=\"small\" color=\"primary\">\n                      Buy\n                    </Button>{\" \"}\n                    /\n                    <Button size=\"small\" color=\"primary\">\n                      Sell\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))\n            ) : (\n              <div />\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default observer(App);\n",["32","33"],"C:\\scratch\\CryptoCurrencyTracker\\src\\AppState.js",["34","35","36","37","38","39"],"import React, { useEffect, useState, useContext } from \"react\";\nimport { observable, configure, action } from \"mobx\";\nimport { ApiCall } from \"./SharedFunctions/ApiCall\";\nimport { createContext } from \"react\";\n\nclass AppState {\n  @observable Images = [{ original: \"\" }];\n  @observable test = 0;\n  ModTest = (Page) => {\n    console.log(\"ModTest\");\n    this.test++;\n  };\n  GetImages = async (Page) => {\n    await ApiCall(\n      \"Get\",\n      `${process.env.REACT_APP_BackEndUrl}/api/PortfolioV2/GetPageInfo/${Page}`\n    ).then((results) => {\n      this.test = \"12345\";\n      this.Images = results;\n    });\n  };\n}\n\nconst AppStateContext = createContext(new AppState());\nAppStateContext.displayName = \"AppStateContext\";\n\nexport default AppStateContext;\n","C:\\scratch\\CryptoCurrencyTracker\\src\\SharedFunctions\\ApiCall.js",[],"C:\\scratch\\CryptoCurrencyTracker\\src\\appState.js",["40","41","42","43","44"],"C:\\scratch\\CryptoCurrencyTracker\\src\\ApiCall.js",[],{"ruleId":"45","severity":1,"message":"46","line":30,"column":10,"nodeType":"47","messageId":"48","endLine":30,"endColumn":14},{"ruleId":"45","severity":1,"message":"49","line":30,"column":16,"nodeType":"47","messageId":"48","endLine":30,"endColumn":23},{"ruleId":"50","severity":1,"message":"51","line":45,"column":6,"nodeType":"52","endLine":45,"endColumn":8,"suggestions":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"45","severity":1,"message":"58","line":1,"column":8,"nodeType":"47","messageId":"48","endLine":1,"endColumn":13},{"ruleId":"45","severity":1,"message":"59","line":1,"column":17,"nodeType":"47","messageId":"48","endLine":1,"endColumn":26},{"ruleId":"45","severity":1,"message":"60","line":1,"column":28,"nodeType":"47","messageId":"48","endLine":1,"endColumn":36},{"ruleId":"45","severity":1,"message":"61","line":1,"column":38,"nodeType":"47","messageId":"48","endLine":1,"endColumn":48},{"ruleId":"45","severity":1,"message":"62","line":2,"column":22,"nodeType":"47","messageId":"48","endLine":2,"endColumn":31},{"ruleId":"45","severity":1,"message":"63","line":2,"column":33,"nodeType":"47","messageId":"48","endLine":2,"endColumn":39},{"ruleId":"45","severity":1,"message":"63","line":1,"column":22,"nodeType":"47","messageId":"48","endLine":1,"endColumn":28},{"ruleId":"45","severity":1,"message":"58","line":3,"column":8,"nodeType":"47","messageId":"48","endLine":3,"endColumn":13},{"ruleId":"45","severity":1,"message":"59","line":3,"column":17,"nodeType":"47","messageId":"48","endLine":3,"endColumn":26},{"ruleId":"45","severity":1,"message":"60","line":3,"column":28,"nodeType":"47","messageId":"48","endLine":3,"endColumn":36},{"ruleId":"45","severity":1,"message":"61","line":3,"column":38,"nodeType":"47","messageId":"48","endLine":3,"endColumn":48},"no-unused-vars","'Rows' is assigned a value but never used.","Identifier","unusedVar","'SetRows' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'AppState'. Either include it or remove the dependency array.","ArrayExpression",["64"],"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"'React' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","'configure' is defined but never used.","'action' is defined but never used.",{"desc":"67","fix":"68"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [AppState]",{"range":"69","text":"70"},[1930,1932],"[AppState]"]