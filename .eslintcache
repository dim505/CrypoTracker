[{"C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\index.js":"1","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\App.js":"2","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Header\\Header.js":"3","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Shared\\appState.js":"4","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Table\\TableContainer.js":"5","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Shared\\ApiCall.js":"6","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Header\\SearchCoins.js":"7","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Table\\MobileTable.js":"8","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Table\\MainTable.js":"9","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Modal\\ModalPopUp.js":"10","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Modal\\Graph.js":"11","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Modal\\NavButton.js":"12"},{"size":230,"mtime":1613147006000,"results":"13","hashOfConfig":"14"},{"size":969,"mtime":1613386086910,"results":"15","hashOfConfig":"14"},{"size":1245,"mtime":1614085670162,"results":"16","hashOfConfig":"14"},{"size":3329,"mtime":1613385600786,"results":"17","hashOfConfig":"14"},{"size":7005,"mtime":1614085070886,"results":"18","hashOfConfig":"14"},{"size":963,"mtime":1613147006000,"results":"19","hashOfConfig":"14"},{"size":1944,"mtime":1613385132318,"results":"20","hashOfConfig":"14"},{"size":508,"mtime":1614085164098,"results":"21","hashOfConfig":"14"},{"size":2172,"mtime":1614085065256,"results":"22","hashOfConfig":"14"},{"size":4635,"mtime":1613385325824,"results":"23","hashOfConfig":"14"},{"size":4456,"mtime":1613389796819,"results":"24","hashOfConfig":"14"},{"size":504,"mtime":1613385562383,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1iklcp8",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},"C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\index.js",[],["61","62"],"C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\App.js",["63","64"],"import React, { useEffect, useState, useContext } from \"react\";\nimport \"./styles.scss\";\nimport Header from \"./Header/Header\";\nimport TableContainer from \"./Table/TableContainer\";\nimport AppStateContext from \"./Shared/appState\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nconst App = () => {\n  const AppState = useContext(AppStateContext);\n  //gets data for application\n  useEffect(() => {\n    AppState.GetData();\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <PerfectScrollbar\n        onScrollDown={(Container) => {\n          var currentScrollPos = Container.scrollHeight - Container.scrollTop;\n          var BottomOfScreen = Container.clientHeight + 1;\n          if (currentScrollPos <= BottomOfScreen) {\n            AppState.LoadMoreCrypto();\n          }\n        }}\n        className=\"Container\"\n      >\n        <TableContainer />\n      </PerfectScrollbar>\n    </>\n  );\n};\n\nexport default App;\n","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Header\\Header.js",["65","66","67"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TimelineIcon from \"@material-ui/icons/Timeline\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport useDarkMode from \"use-dark-mode\";\r\nimport SearchCoins from \"./SearchCoins\";\r\nimport Fade from 'react-reveal/Fade';\r\n\r\n//defines some config for dark mode\r\nconst darkModeConfig = {\r\n  storageKey: null\r\n}\r\nconst Header = () => {\r\n  //enables use of dark mode\r\n  const darkMode = useDarkMode(false, darkModeConfig);\r\n\r\n  return (\r\n     \r\n    <Fade top cascade duration={200}>\r\n      <div className=\"NavBar\">\r\n        <TimelineIcon />\r\n\r\n        <Typography variant=\"h5\">CryptoTracker</Typography>\r\n\r\n        <div className=\"FlexEnd\">\r\n          <Typography display=\"inline\" variant=\"body2\" gutterBottom>\r\n            Night Mode\r\n          </Typography>\r\n          <Switch onClick={darkMode.toggle} color=\"primary\" />\r\n          <Typography display=\"inline\" variant=\"body2\" gutterBottom>\r\n            Day Mode\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n      <Divider />\r\n      <SearchCoins />\r\n      </Fade>\r\n     \r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Shared\\appState.js",["68","69","70"],"import { observable, action, computed } from \"mobx\";\r\nimport { ApiCall } from \"./ApiCall.js\";\r\nimport { createContext } from \"react\";\r\n \r\n//contains shared functions and state for the app\r\nclass AppState {\r\n  @observable Rows = [];\r\n  @observable RowsFiltered = [];\r\n  @observable Fiats = [];\r\n  @observable SelectedFiat = \"USD\";\r\n  @observable SearchArray = [];\r\n  @observable ConversionRate = '';\r\n\r\n  setCrypoPics = () => {\r\n    setTimeout(() => {\r\n      var items = document.getElementsByClassName(\"CrytpoIcon\");\r\n      for (var item of items) {\r\n        if (item.innerHTML.search(\"undefined\") !== -1) {\r\n          item.innerHTML = `<svg height=\"32\" viewBox=\"0 0 32 32\" width=\"32\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><circle cx=\"16\" cy=\"16\" fill=\"#efb914\" fill-rule=\"nonzero\" r=\"16\"/><path d=\"M21.002 9.855A7.947 7.947 0 0124 15.278l-2.847-.708a5.357 5.357 0 00-3.86-3.667c-2.866-.713-5.76.991-6.465 3.806s1.05 5.675 3.917 6.388a5.373 5.373 0 005.134-1.43l2.847.707a7.974 7.974 0 01-5.2 3.385L16.716 27l-2.596-.645.644-2.575a8.28 8.28 0 01-1.298-.323l-.643 2.575-2.596-.646.81-3.241c-2.378-1.875-3.575-4.996-2.804-8.081s3.297-5.281 6.28-5.823L15.323 5l2.596.645-.644 2.575a8.28 8.28 0 011.298.323l.643-2.575 2.596.646z\" fill=\"#fff\"/></g></svg> `;\r\n        }\r\n      }\r\n    }, 1000);\r\n  };\r\n  GetData = () => {\r\n    ApiCall(\"Get\", \"https://api.coincap.io/v2/assets?limit=600\").then(\r\n      (results) => {\r\n        this.Rows = results.data;\r\n        this.RowsFiltered = results.data.slice(0, 200);\r\n        this.IsLoaded = true;\r\n\r\n        this.setCrypoPics();\r\n      }\r\n    );\r\n\r\n    ApiCall(\"Get\", \"https://api.coincap.io/v2/rates\").then((results) => {\r\n      this.Fiats = results.data;\r\n    });\r\n  };\r\n\r\n  UpdateSelectedFiat = (NewFiat) => {\r\n      if (NewFiat !== \"USD\") {\r\n      var FilteredArray = this.Fiats.filter(\r\n        (fiat) => fiat.symbol === NewFiat\r\n      );\r\n      this.ConversionRate = FilteredArray[0].rateUsd\r\n      }\r\n    \r\n      this.SelectedFiat = NewFiat;\r\n\r\n  };\r\n\r\n  SearchCoins = (CoinSearch) => {\r\n    this.SearchArray = this.Rows.filter((Row) => {\r\n      if (Row.name.toLowerCase().includes(CoinSearch.toLowerCase())) {\r\n        return Row.name;\r\n      }\r\n    });\r\n\r\n    this.RowsFiltered = this.SearchArray.slice(0, 25);\r\n\r\n    if (CoinSearch === \"\") {\r\n      this.RowsFiltered = this.Rows.slice(0, 25);\r\n      this.SearchArray = [];\r\n    }\r\n    document.getElementsByClassName(\"Container\")[0].scrollTop = 0;\r\n    this.setCrypoPics();\r\n  };\r\n\r\n  CalculatePrice(BaseUsdPrice) {\r\n    if (this.SelectedFiat !== \"USD\") {\r\n      return BaseUsdPrice * (1 / this.ConversionRate);\r\n    } else {\r\n      return BaseUsdPrice;\r\n    }\r\n  }\r\n\r\n  LoadMoreCrypto = () => {\r\n    if (this.SearchArray.length > 0) {\r\n      this.RowsFiltered = [\r\n        ...this.RowsFiltered,\r\n        ...this.SearchArray.slice(\r\n          this.RowsFiltered.length,\r\n          this.RowsFiltered.length + 200\r\n        )\r\n      ];\r\n      this.setCrypoPics();\r\n    } else {\r\n      this.RowsFiltered = [\r\n        ...this.RowsFiltered,\r\n        ...this.Rows.slice(\r\n          this.RowsFiltered.length,\r\n          this.RowsFiltered.length + 200\r\n        )\r\n      ];\r\n      this.setCrypoPics();\r\n    }\r\n \r\n  };\r\n}\r\n\r\nconst AppStateContext = createContext(new AppState());\r\nexport default AppStateContext;\r\n","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Table\\TableContainer.js",["71","72"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport AppStateContext from \"../Shared/appState\";\r\nimport { observer } from \"mobx-react\";\r\nimport MoodBadIcon from \"@material-ui/icons/MoodBad\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MainTable from \"./MainTable\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport MobileTable from \"./MobileTable\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport ArrowDropUpIcon from \"@material-ui/icons/ArrowDropUp\";\r\nimport { Icon } from \"coinmarketcap-cryptocurrency-icons\";\r\nimport LaunchIcon from \"@material-ui/icons/Launch\";\r\nimport { ApiCall } from \"../Shared/ApiCall\";\r\nimport ModalPopUp from \"../Modal/ModalPopUp\" \r\nimport Fade from 'react-reveal/Fade';\r\n\r\n//parent table that holds with mobile and desktop table components\r\nconst TableContainer = () => {\r\n  const AppState = useContext(AppStateContext);\r\n  const [OpnModal, SetModal] = useState(false);\r\n  //keeps track of the Crypto the user clicked on\r\n  const [SelectedCrypto, SetSelectedCrypto] = useState({\r\n    name: \"\",\r\n    symbol: \"\"\r\n  });\r\n  //keeps track of screen size\r\n  const IsMobile = useMediaQuery(\"(max-width: 800px)\");\r\n  \r\n  //opens modal\r\n  const OpenModal = (CryptoName) => {\r\n\r\n    SetModal(true);\r\n    //gets data for selected coin\r\n    ApiCall(\"Get\", `https://api.coincap.io/v2/assets/${CryptoName}`).then(\r\n      (results) => {\r\n        if (results.data !== undefined) {\r\n          SetSelectedCrypto(results.data);\r\n        }\r\n      }\r\n    );\r\n\r\n    //replaces icons with generic icon if no icon is found\r\n    setTimeout(() => {\r\n      var IconElement = document.getElementById(\"ModalIcon\");\r\n      if (IconElement.innerHTML.search(\"undefined\") !== -1) {\r\n        IconElement.innerHTML = `<svg height=\"80\" viewBox=\"0 0 32 32\" width=\"80\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><circle cx=\"16\" cy=\"16\" fill=\"#efb914\" fill-rule=\"nonzero\" r=\"16\"/><path d=\"M21.002 9.855A7.947 7.947 0 0124 15.278l-2.847-.708a5.357 5.357 0 00-3.86-3.667c-2.866-.713-5.76.991-6.465 3.806s1.05 5.675 3.917 6.388a5.373 5.373 0 005.134-1.43l2.847.707a7.974 7.974 0 01-5.2 3.385L16.716 27l-2.596-.645.644-2.575a8.28 8.28 0 01-1.298-.323l-.643 2.575-2.596-.646.81-3.241c-2.378-1.875-3.575-4.996-2.804-8.081s3.297-5.281 6.28-5.823L15.323 5l2.596.645-.644 2.575a8.28 8.28 0 011.298.323l.643-2.575 2.596.646z\" fill=\"#fff\"/></g></svg> `;\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  //closes modal \r\n  const CloseModal = () => {\r\n    SetModal(false);\r\n    SetSelectedCrypto({\r\n      name: \"\",\r\n      symbol: \"\"\r\n    });\r\n  };\r\n  window.IsMobile = IsMobile;\r\n  \r\n  //defines the columns required the mobile table\r\n  const columns = [\r\n    {\r\n      key: \"name\",\r\n      label: \"Name\"\r\n    },\r\n\r\n    { key: \"PriceTracking\", label: \"Price Tracking\" },\r\n    {\r\n      key: \"MarketCap\",\r\n      label: \"Market Cap\"\r\n    },\r\n    {\r\n      key: \"Price\",\r\n      label: \"Price\"\r\n    },\r\n\r\n    {\r\n      key: \"Volume24hr\",\r\n      label: \"Volume 24 HR.\"\r\n    },\r\n    {\r\n      key: \"CirculatingSupply\",\r\n      label: \"Circulating Supply\"\r\n    },\r\n    {\r\n      key: \"Change\",\r\n      label: \"Change (24 hr)\"\r\n    }\r\n  ];\r\n  //builds out the rows for the table \r\n  const data = AppState.RowsFiltered.map((row) => {\r\n    var RowObj = {\r\n      Key: row.id,\r\n      name: (\r\n        <div>\r\n          <div className=\"CrytpoIcon\">\r\n            <Icon i={row.symbol.toLowerCase()} size={32} />\r\n          </div>\r\n          <span id=\"CryptoSymbol\"> {row.symbol} </span>\r\n\r\n          {row.name}\r\n        </div>\r\n      ),\r\n\r\n      PriceTracking: (\r\n        <>\r\n          {IsMobile ? (\r\n            <LaunchIcon\r\n              classes={{ root: \"pointer\" }}\r\n              onClick={() => OpenModal(row.id)}\r\n            />\r\n          ) : (\r\n            <div />\r\n          )}\r\n        </>\r\n      ),\r\n      MarketCap: (\r\n        <NumberFormat\r\n          value={AppState.CalculatePrice(row.marketCapUsd)}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          suffix={\" \" + AppState.SelectedFiat}\r\n          decimalScale={2}\r\n        />\r\n      ),\r\n      Price: (\r\n        <NumberFormat\r\n          value={AppState.CalculatePrice(row.priceUsd)}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          suffix={\" \" + AppState.SelectedFiat}\r\n          decimalScale={2}\r\n        />\r\n      ),\r\n      Volume24hr: (\r\n        <NumberFormat\r\n          value={row.volumeUsd24Hr}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          decimalScale={3}\r\n        />\r\n      ),\r\n      CirculatingSupply: (\r\n        <NumberFormat\r\n          value={\r\n            AppState.CalculatePrice(row.volumeUsd24Hr) +\r\n            \" \" +\r\n            AppState.SelectedFiat\r\n          }\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          decimalScale={3}\r\n        />\r\n      ),\r\n      Change: (\r\n        <NumberFormat\r\n          value={row.changePercent24Hr}\r\n          displayType={\"text\"}\r\n          decimalScale={2}\r\n          suffix=\"%\"\r\n          renderText={(value) =>\r\n            Math.sign(row.changePercent24Hr) === -1 ? (\r\n              <div>\r\n                {\" \"}\r\n                <ArrowDropDownIcon viewBox=\"0 -7 24 24\" /> {value}{\" \"}\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <ArrowDropUpIcon viewBox=\"0 -7 24 24\" /> {value}{\" \"}\r\n              </div>\r\n            )\r\n          }\r\n        />\r\n      )\r\n    };\r\n\r\n    return RowObj;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {AppState.RowsFiltered.length >= 1 ? (\r\n        <>\r\n\r\n          {IsMobile ? (\r\n            <MobileTable data={data} columns={columns} />\r\n          ) : (\r\n            <MainTable\r\n              OpenModal={(ClickedCrypto, CryptoSymbol) =>\r\n                OpenModal(ClickedCrypto, CryptoSymbol)\r\n              }\r\n              data={data}\r\n            />\r\n          )}\r\n\r\n          {AppState.SearchArray.length <= 0 ? (\r\n            <div className=\"center\">\r\n              <Typography variant=\"h2\" gutterBottom>\r\n                Loading.........\r\n              </Typography>{\" \"}\r\n            </div>\r\n          ) : (\r\n            <div />\r\n          )}\r\n        </>\r\n      ) : AppState.IsLoaded === true ? (\r\n        <div className=\"center\">\r\n          {\" \"}\r\n          <MoodBadIcon fontSize=\"large\" />{\" \"}\r\n          <Typography display=\"inline\" variant=\"h3\" gutterBottom>\r\n            No coins found\r\n          </Typography>{\" \"}\r\n          <MoodBadIcon fontSize=\"large\" />\r\n        </div>\r\n      ) : (\r\n        <div className=\"center\">\r\n          <Typography variant=\"h3\" gutterBottom>\r\n            Loading.........\r\n          </Typography>{\" \"}\r\n        </div>\r\n      )}\r\n\r\n        <ModalPopUp \r\n       \r\n        IsMobile={IsMobile}\r\n        CloseModal={CloseModal}\r\n        OpnModal={OpnModal}\r\n        SelectedCrypto = {SelectedCrypto}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(TableContainer);\r\n","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Shared\\ApiCall.js",[],"C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Header\\SearchCoins.js",["73","74","75"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport AppStateContext from \"../Shared/appState\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst SearchCoins = () => {\r\n  const appState = useContext(AppStateContext);\r\n  //function to calcualte time lasped\r\n  const GetTimeElapsed = (startTime) => {\r\n    var elapsedTime = Date.now() - startTime;\r\n    return elapsedTime;\r\n  };\r\n\r\n  //searches coins with each key entered\r\n  const handleChange = async (SearchTerm) => {\r\n    appState.SearchCoins(SearchTerm);\r\n  };\r\n\r\n\r\n  //keeps track of  selected Fiat \r\n  const UpdateFiat = (event) => {\r\n    appState.UpdateSelectedFiat(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormControl>\r\n        <InputLabel htmlFor=\"SearchCoins\">Search Coins</InputLabel>\r\n        <Input\r\n          onChange={(event) => handleChange(event.target.value)}\r\n          id=\"SearchCoins\"\r\n          endAdornment={\r\n            <div>\r\n              <IconButton>\r\n                <SearchIcon />\r\n              </IconButton>\r\n            </div>\r\n          }\r\n        />\r\n      </FormControl>\r\n\r\n      <FormControl\r\n        classes={{\r\n          root: \"Fiat\"\r\n        }}\r\n      >\r\n        <InputLabel htmlFor=\"Fiat\">Fiat</InputLabel>\r\n        <NativeSelect onChange={UpdateFiat} id=\"Fiat\">\r\n          <option value=\"USD\"> USD</option>\r\n          {appState.Fiats.map((fiat) => {\r\n            return (\r\n              <option value={fiat.symbol}> {fiat.symbol.padEnd(100)}</option>\r\n            );\r\n          })}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default observer(SearchCoins);\r\n","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Table\\MobileTable.js",["76","77"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport ResponsiveTable from \"material-ui-next-responsive-table\";\r\nimport AppStateContext from \"../Shared/appState\";\r\n \r\n\r\n//contains table for mobile view\r\nconst MobileTable = (props) => {\r\n  const appState = useContext(AppStateContext);\r\n  useEffect(() => {\r\n    appState.setCrypoPics();\r\n  }, []);\r\n  return (\r\n  \r\n \r\n    \r\n    <ResponsiveTable data={props.data} columns={props.columns} />\r\n     )\r\n    ;\r\n};\r\n\r\nexport default MobileTable;\r\n","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Table\\MainTable.js",["78","79"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { TableContainer } from \"@material-ui/core\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport AppStateContext from \"../Shared/appState\";\r\nimport Fade from 'react-reveal/Fade';\r\nimport { observer } from \"mobx-react\";\r\n\r\n\r\n//contains desktop table \r\nconst MainTable = (props) => {\r\n  const appState = useContext(AppStateContext);\r\n  //fixes missing Crypto icons\r\n  useEffect(() => {\r\n    appState.setCrypoPics();\r\n  }, []);\r\n\r\n  return (\r\n    <Fade top cascade>\r\n    <TableContainer>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell> Market Cap</TableCell>\r\n\r\n            <TableCell>Price</TableCell>\r\n            <TableCell>Volume (24 HR)</TableCell>\r\n            <TableCell>Circulating Supply</TableCell>\r\n            <TableCell>Change (24 hr)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          \r\n     \r\n  \r\n          {props.data.map((row) => (\r\n            <TableRow\r\n              key={row.Key}\r\n              onClick={() => {\r\n                props.OpenModal(row.Key);\r\n              }}\r\n            >\r\n              <TableCell>{row.name}</TableCell>\r\n              <TableCell>{row.MarketCap}</TableCell>\r\n              <TableCell>{row.Price}</TableCell>\r\n              <TableCell>{row.Volume24hr}</TableCell>\r\n              <TableCell>{row.CirculatingSupply}</TableCell>\r\n              <TableCell\r\n                classes={{\r\n                  root:\r\n                    Math.sign(parseFloat(row.Change.props.value)) === -1\r\n                      ? \"ColorRed\"\r\n                      : \"ColorGreen\"\r\n                }}\r\n              >\r\n                {row.Change}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n\r\n\r\n\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport default observer(MainTable);\r\n","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Modal\\ModalPopUp.js",["80","81"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Graph from \"./Graph\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport AppStateContext from \"../Shared/appState\"\r\nimport { Icon } from \"coinmarketcap-cryptocurrency-icons\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n\r\n//parent modal that hold a summary of coin data\r\nconst ModalPopUp = (props) => {\r\n      const AppState = useContext(AppStateContext)\r\n        return (\r\n            <Modal\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n            open={props.OpnModal}\r\n            onClose={props.CloseModal}\r\n            className=\"ModalStyle\"\r\n          >\r\n            <Fade in={props.OpnModal} timeout={250}>\r\n              <Paper\r\n                classes={{\r\n                  root: props.IsMobile ? \"ModalPaper ModalPaperMoble\" : \"ModalPaper\"\r\n                }}\r\n              >\r\n                {\" \"}\r\n                <Grid container>\r\n                  <Grid item xs={12} md={3}>\r\n                    <div id=\"ModalIcon\">\r\n                      <Icon i={props.SelectedCrypto.symbol.toLowerCase()} size={80} />\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={9}>\r\n                    <Typography variant=\"h3\">{props.SelectedCrypto.name}</Typography>\r\n                    <Typography variant=\"h5\" gutterBottom>\r\n                      <NumberFormat\r\n                        value={props.SelectedCrypto.supply}\r\n                        displayType={\"text\"}\r\n                        thousandSeparator={true}\r\n                        decimalScale={3}\r\n                        suffix=\" \"\r\n                      />\r\n                      Circulating Supply\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid spacing={4} container>\r\n                  <Grid item xs={12} md={4}>\r\n                    <Card>\r\n                      <CardContent>\r\n                        <p>\r\n                          <b> Current Value </b>{\" \"}\r\n                        </p>\r\n    \r\n                        <NumberFormat\r\n                          value={AppState.CalculatePrice(props.SelectedCrypto.priceUsd)}\r\n                          displayType={\"text\"}\r\n                          thousandSeparator={true}\r\n                          suffix={\" \" + AppState.SelectedFiat}\r\n                          decimalScale={2}\r\n                        />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n    \r\n                  <Grid item xs={12} md={4}>\r\n                    <Card>\r\n                      <CardContent>\r\n                        <p>\r\n                          {\" \"}\r\n                          <b> Market Cap </b>{\" \"}\r\n                        </p>\r\n    \r\n                        <NumberFormat\r\n                          value={AppState.CalculatePrice(\r\n                            props.SelectedCrypto.marketCapUsd\r\n                          )}\r\n                          displayType={\"text\"}\r\n                          thousandSeparator={true}\r\n                          suffix={\" \" + AppState.SelectedFiat}\r\n                          decimalScale={2}\r\n                        />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={4}>\r\n                    <Card>\r\n                      <CardContent>\r\n                        <p>\r\n                          {\" \"}\r\n                          <b>24hr Volume </b>\r\n                        </p>\r\n    \r\n                        <NumberFormat\r\n                          value={props.SelectedCrypto.volumeUsd24Hr}\r\n                          displayType={\"text\"}\r\n                          thousandSeparator={true}\r\n                          decimalScale={3}\r\n                        />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n                {props.SelectedCrypto.id !== \"\" ? (\r\n                  <Graph CryptoName={props.SelectedCrypto.id} />\r\n                ) : (\r\n                  <div />\r\n                )}\r\n                {/** */}\r\n              </Paper>\r\n            </Fade>\r\n          </Modal>\r\n        )\r\n}\r\n\r\nexport default ModalPopUp","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Modal\\Graph.js",["82"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport NavButton from \"./NavButton\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\nimport moment from \"moment\";\r\nimport { ApiCall } from \"../Shared/ApiCall\";\r\nimport AppStateContext from \"../Shared/appState\";\r\n\r\n\r\n//displays graph in modal\r\nconst Graph = (props) => {\r\n  const AppState = useContext(AppStateContext);\r\n  //holds actual graph data\r\n  const [GraphData, SetGraphData] = useState([]);\r\n  //tracks which button is pressed\r\n  const [ActiveButton, SetActiveButton] = useState(\"Day\");\r\n  \r\n  useEffect(() => {\r\n    if (props.CryptoName !== undefined) {\r\n      //gets current timee\r\n      var CurrDate = moment().unix();\r\n      //gets time minus one day\r\n      var CurrDateMinusOneDay = moment().subtract(1, \"days\").unix();\r\n      //gets data for days graph\r\n      GetGraphData(props.CryptoName, CurrDateMinusOneDay, CurrDate, \"h1\");\r\n    }\r\n  }, [props.CryptoName]);\r\n\r\n  //function that keeps track which time frame/button was pressed\r\n  //and gets the data approproate for the time frame\r\n  const HandleButtonClick = (ButtonClicked) => {\r\n    SetActiveButton(ButtonClicked);\r\n    var CurrDate = moment().unix();\r\n    var CurrDateMinusOneDay = \"\";\r\n    if (ButtonClicked === \"Day\") {\r\n      CurrDateMinusOneDay = moment().subtract(1, \"days\").unix();\r\n      GetGraphData(props.CryptoName, CurrDateMinusOneDay, CurrDate, \"h1\");\r\n    } else if (ButtonClicked === \"Week\") {\r\n      CurrDateMinusOneDay = moment().subtract(7, \"days\").unix();\r\n      GetGraphData(props.CryptoName, CurrDateMinusOneDay, CurrDate, \"d1\");\r\n    } else if (ButtonClicked === \"Month\") {\r\n      CurrDateMinusOneDay = moment().subtract(30, \"days\").unix();\r\n      GetGraphData(props.CryptoName, CurrDateMinusOneDay, CurrDate, \"d1\");\r\n    } else if (ButtonClicked === \"Year\") {\r\n      CurrDateMinusOneDay = moment().subtract(365, \"days\").unix();\r\n      GetGraphData(props.CryptoName, CurrDateMinusOneDay, CurrDate, \"d1\");\r\n    }\r\n  };\r\n\r\n  //StartTime minus 1 day, endtime = current time\r\n  //function that gets the actual data\r\n  const GetGraphData = (Coin, StartTime, EndTime, Interval) => {\r\n    ApiCall(\r\n      \"Get\",\r\n      `https://api.coincap.io/v2/assets/${Coin.toLowerCase()}/history?start=${\r\n        StartTime * 1000\r\n      }&end=${EndTime * 1000}&interval=${Interval}`\r\n    ).then((results) => {\r\n      var QueryResults = results.data;\r\n      var FormattedResults = [];\r\n\r\n      QueryResults.forEach((row) => {\r\n        /*this will format for days table */\r\n        var NewDate = moment(row.time).format(\"MMM DD, YY H:mm\");\r\n        FormattedResults.push({\r\n          date: NewDate,\r\n          price: parseFloat(parseFloat(AppState.SelectedFiat === \"USD\" ? row.priceUsd : AppState.CalculatePrice(row.priceUsd) ).toFixed(3))\r\n        });\r\n      });\r\n       \r\n      SetGraphData(FormattedResults);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid spacing={1} justify=\"flex-end\" container>\r\n        <Grid item>\r\n          <NavButton\r\n            ActiveButton={ActiveButton}\r\n            HandleButtonClick={HandleButtonClick}\r\n            ButtonText=\"Year\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <NavButton\r\n            ActiveButton={ActiveButton}\r\n            HandleButtonClick={HandleButtonClick}\r\n            ButtonText=\"Month\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <NavButton\r\n            ActiveButton={ActiveButton}\r\n            HandleButtonClick={HandleButtonClick}\r\n            ButtonText=\"Week\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <NavButton\r\n            ActiveButton={ActiveButton}\r\n            HandleButtonClick={HandleButtonClick}\r\n            ButtonText=\"Day\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <div className=\"ChartContainer\">\r\n        <ResponsiveContainer height={300} width=\"99%\">\r\n          <LineChart\r\n            margin={{ top: 20, right: 30, left: 0, bottom: 0 }}\r\n            data={GraphData}\r\n          >\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line dot={false} dataKey=\"price\" stroke=\"#008b8b\" />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","C:\\scratch\\Code\\projects\\CryptoCurrencyTracker\\src\\Modal\\NavButton.js",["83","84","85"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n//buttons above the graph that get the day,week, month and year time frame data\r\nconst NavButton = (props) => {\r\n  return (\r\n    <Button\r\n      onClick={() => props.HandleButtonClick(props.ButtonText)}\r\n      variant={props.ActiveButton === props.ButtonText ? \"contained\" : \"\"}\r\n      color=\"primary\"\r\n    >\r\n      {props.ButtonText}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default NavButton;\r\n",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"95","line":13,"column":6,"nodeType":"96","endLine":13,"endColumn":8,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"98","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"91","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"99","line":1,"column":38,"nodeType":"92","messageId":"93","endLine":1,"endColumn":48},{"ruleId":"90","severity":1,"message":"100","line":1,"column":22,"nodeType":"92","messageId":"93","endLine":1,"endColumn":28},{"ruleId":"90","severity":1,"message":"101","line":1,"column":30,"nodeType":"92","messageId":"93","endLine":1,"endColumn":38},{"ruleId":"102","severity":1,"message":"103","line":53,"column":47,"nodeType":"104","messageId":"105","endLine":53,"endColumn":49},{"ruleId":"90","severity":1,"message":"98","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"106","line":16,"column":8,"nodeType":"92","messageId":"93","endLine":16,"endColumn":12},{"ruleId":"90","severity":1,"message":"98","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"91","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"107","line":14,"column":9,"nodeType":"92","messageId":"93","endLine":14,"endColumn":23},{"ruleId":"90","severity":1,"message":"91","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"108","line":11,"column":6,"nodeType":"96","endLine":11,"endColumn":8,"suggestions":"109"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"108","line":19,"column":6,"nodeType":"96","endLine":19,"endColumn":8,"suggestions":"110"},{"ruleId":"90","severity":1,"message":"98","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"91","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"111","line":36,"column":6,"nodeType":"96","endLine":36,"endColumn":24,"suggestions":"112"},{"ruleId":"90","severity":1,"message":"98","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"91","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"99","line":1,"column":38,"nodeType":"92","messageId":"93","endLine":1,"endColumn":48},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'AppState'. Either include it or remove the dependency array.","ArrayExpression",["115"],"'useEffect' is defined but never used.","'useContext' is defined but never used.","'action' is defined but never used.","'computed' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Fade' is defined but never used.","'GetTimeElapsed' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'appState'. Either include it or remove the dependency array.",["116"],["117"],"React Hook useEffect has a missing dependency: 'GetGraphData'. Either include it or remove the dependency array.",["118"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"121","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [AppState]",{"range":"126","text":"127"},"Update the dependencies array to be: [appState]",{"range":"128","text":"129"},{"range":"130","text":"129"},"Update the dependencies array to be: [GetGraphData, props.CryptoName]",{"range":"131","text":"132"},[485,487],"[AppState]",[360,362],"[appState]",[708,710],[1055,1073],"[GetGraphData, props.CryptoName]"]